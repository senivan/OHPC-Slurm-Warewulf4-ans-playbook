---
- name: Install and configure Master Host
  hosts: master
  remote_user: root
  vars_files:
    - vars.yaml
  tasks:
    - name: Host pre-setup
      block:
        - name: Disable firewalld
          ansible.builtin.systemd_service:
            name: firewalld
            state: stopped
            enabled: false
        - name: Disable SELinux
          ansible.posix.selinux:
            state: disabled
        - name: Update base system
          ansible.builtin.dnf:
            name: "*"
            state: latest
    - name: Install OHPC Components
      block:
        - name: Enable OHPC repo
          ansible.builtin.dnf:
            name: "{{ repo_url }}"
            state: present
            disable_gpg_check: true
        - name: Install dnf-plugins-core
          ansible.builtin.dnf:
            name: "dnf-plugins-core"
            state: present
        - name: Enable crb repo
          ansible.builtin.command:
            cmd: dnf config-manager --set-enabled crb
        - name: Add provisioning services
          ansible.builtin.dnf:
            name: ['ohpc-base', 'warewulf-ohpc', 'hwloc-ohpc']
            state: present
    - name: Setup chrony ntp server
      block:
        - name: Enable chrony
          ansible.builtin.systemd_service:
            name: chronyd
            state: started
            enabled: true
        - name: Change config with blockinfile
          ansible.builtin.blockinfile:
            name: /etc/chrony.conf
            block: |
              local stratum 10
              server {{ ntp_server }}
              allow {{ internal_net }}/{{ internal_CIDR }}
            state: present
        - name: Restart chrony
          ansible.builtin.systemd_service:
            name: chronyd
            state: restarted
    - name: Add resource management on master
      block:
        - name: Install slurm server
          ansible.builtin.dnf:
            name: 'ohpc-slurm-server'
            state: present
        - name: Copy example slurm.conf
          ansible.builtin.copy:
            src: /etc/slurm/slurm.conf.ohpc
            dest: /etc/slurm/slurm.conf
            remote_src: true
        - name: Copy example cgroups
          ansible.builtin.copy:
            src: /etc/slurm/cgroup.conf.example
            dest: /etc/slurm/cgroup.conf
            remote_src: true
        - name: Change server host
          ansible.builtin.replace:
            regexp: "^SlurmctldHost=.*$"
            replace: "SlurmctldHost={{ master_hostname }}"
            name: /etc/slurm/slurm.conf
        - name: Comment out node host
          ansible.builtin.replace:
            regexp: "^NodeName=.*$"
            replace: "#NodeName={{ compute_prefix }}[1-{{ compute_number }}]"
            name: /etc/slurm/slurm.conf
        - name: Add node host
          ansible.builtin.lineinfile:
            line: "{{ slurm_node_conf }}"
            state: present
            insertafter: EOF
            name: /etc/slurm/slurm.conf
        - name: Fix partition config
          ansible.builtin.replace:
            name: /etc/slurm/slurm.conf
            regexp: "^PartitionName=normal Nodes=.*$"
            replace: "PartitionName=normal Nodes={{ compute_prefix }}[1-{{ compute_number }}] Default=YES MaxTime=24:00:00 State=UP Oversubscribe=EXCLUSIVE"
    - name: Complete Basic Warewulf setup for master
      block:
        - name: Set internal interface UP
          ansible.builtin.command:
            cmd: ip link set {{ internal_eth }} up
        - name: Set internal interface IP
          ansible.builtin.command:
            cmd: ip addr add {{ master_ip }}/{{ internal_CIDR }} broadcast + dev {{ internal_eth }}
        - name: Replace ipaddr in Warewulf config
          ansible.builtin.replace:
            regexp: "^ipaddr:.*$"
            replace: "ipaddr: {{ master_ip }}"
            name: /etc/warewulf/warewulf.conf
        - name: Replace netmask in Warewulf config
          ansible.builtin.replace:
            regexp: "^netmask:.*$"
            replace: "netmask: {{ internal_netmask }}"
            name: /etc/warewulf/warewulf.conf
        - name: Replace network in Warewulf config
          ansible.builtin.replace:
            regexp: "^network:.*$"
            replace: "network: {{ internal_net }}"
            name: /etc/warewulf/warewulf.conf
        - name: Replace template to static
          ansible.builtin.replace:
            regexp: "^template:.*$"
            replace: "template: static"
            name: /etc/warewulf/warewulf.conf
        - name: Replace dhcp range start
          ansible.builtin.replace:
            regexp: "^range start:.*$"
            replace: "range start: {{ compute_nodes[0].ip }}"
            name: /etc/warewulf/warewulf.conf
        - name: Replace dhcp range end
          ansible.builtin.replace:
            regexp: "^range end:.*$"
            replace: "range end: {{ compute_nodes[-1].ip }}"
            name: /etc/warewulf/warewulf.conf
        - name: Change mount false to true
          ansible.builtin.replace:
            regexp: "^mount: false$"
            replace: "mount: true"
            name: /etc/warewulf/warewulf.conf
        - name: Start Warewulf daemon
          ansible.builtin.systemd_service:
            name: warewulfd
            state: started
            enabled: true
        - name: Set netmask with wwctl
          ansible.builtin.command:
            cmd: wwctl profile set -y default --netmask {{ internal_netmask }}
        - name: Set ipv4 gateway with wwctl
          ansible.builtin.command:
            cmd: wwctl profile set -y default --gateway {{ ipv4_gateway }}
        - name: Set dns server with wwctl
          ansible.builtin.command:
            cmd: wwctl profile set -y default --netdev=default --nettagadd=DNS={{ master_ip }}
        - name: Change host /etc/hosts
          ansible.builtin.replace:
            regexp: "^warewulf$"
            replace: "{{ master_hostname }}"
            name: /srv/warewulf/overlays/host/rootfs/etc/hosts.ww
        - name: Change generic /etc/hosts
          ansible.builtin.replace:
            regexp: "^warewulf$"
            replace: "{{ master_hostname }}"
            name: /srv/warewulf/overlays/generic/rootfs/etc/hosts.ww
        - name: Add iPXE server into dhcpd config
          ansible.builtin.lineinfile:
            line: "next-server {{ master_ip }};"
            state: present
            insertafter: "EOF"
            name: /srv/warewulf/overlays/host/rootfs/etc/dhcpd.conf.ww
        - name: Enable warewulfd
          ansible.builtin.systemd_service:
            name: warewulfd
            state: started
            enabled: true
        - name: Run configure all
          ansible.builtin.command:
            cmd: wwctl configure --all
        - name: Setup ssh keys
          ansible.builtin.command:
            cmd: bash /etc/profile.d/ssh_setup.sh
    - name: Define compute image for provisioning
      block:
        - name: Pull base image
          ansible.builtin.command:
            cmd: wwctl container import {{ compute_base_image }} {{ local_image_name }} --syncuser
        - name: Enable OpenHPC inside image
          ansible.builtin.command:
            cmd: wwctl container exec {{ local_image_name }} dnf -y install {{ repo_url }}
        - name: Update base image
          ansible.builtin.command:
            cmd: wwctl container exec {{ local_image_name }} dnf -y update
        - name: Export CHROOT
          ansible.builtin.set_fact:
            chroot_loc: "/srv/warewulf/chroots/{{ local_image_name }}/rootfs"
        - name: Install ohpc base Components
          ansible.builtin.dnf:
            name: ['ohpc-base-compute', 'ohpc-slurm-client', 'chrony', 'lmod-ohpc']
            state: present
            installroot: "{{ chroot_loc }}" 
    - name: Increase memory limits
      block: 
        - name: Increase master memory limits
          ansible.builtin.replace:
            regexp: "^# End of file$"
            replace: "* soft memlock unlimited\n* hard memlock unlimited\n# End of file"
            name: /etc/security/limits.conf
        - name: Increase compute memory limits
          ansible.builtin.replace:
            regexp: "^# End of file$"
            replace: "* soft memlock unlimited\n* hard memlock unlimited\n# End of file"
            name: "{{ chroot_loc }}/etc/security/limits.conf"
    - name: Lock ssh
      ansible.builtin.lineinfile:
        line: "account required pam_slurm.so"
        state: present
        insertafter: "EOF"
        name: "{{ chroot_loc }}/etc/pam.d/sshd"
      when: ssh_lock
    - name: Enable system logs forwarding
      block:
        - name: Append config file
          ansible.builtin.blockinfile:
            block: |
              module(load="imudp")
              input(type="imudp" port="514")
            name: /etc/rsyslog.d/ohpc.conf
            state: present
        - name: Restart rsyslog
          ansible.builtin.systemd_service:
            name: rsyslog
            state: restarted
        - name: Define compute node forwarding
          ansible.builtin.blockinfile:
            block: |
              "*.* action(type=\"omfwd\" Target=\"${sms_ip}\" Port=\"514\" " \
              "Protocol=\"udp\")"
            name: "{{ chroot_loc }}/etc/rsyslog.conf"
            state: present
        - name: Disable info logging
          ansible.builtin.replace:
            regexp: "^*.info|^authpriv.*|^mail.*|^cron.*|^local0.*|^local1.*|^local2.*|^local3.*|^local4.*|^local5.*|^local6.*|^local7.*"
            replace: "#&"
            name: "{{ chroot_loc }}/etc/rsyslog.conf"
    - name: Add health check
      block:
        - name: Install health check on master
          ansible.builtin.dnf:
            name: 'nhc-ohpc'
            state: present
        - name: Install health check on compute
          ansible.builtin.dnf:
            installroot: "{{ chroot_loc }}"
            name: 'nhc-ohpc'
            state: present
        - name: Register slurm health check
          ansible.builtin.blockinfile:
            block: |
              HealthCheckProgram=/usr/sbin/nhc
              HealthCheckInterval=300
            name: /etc/slurm/slurm.conf
            state: present
    - name: Import important files
      block:
        - name: Import subuid
          ansible.builtin.command:
            cmd: wwctl overlay import generic /etc/subuid
        - name: Import subgid
          ansible.builtin.command:
            cmd: wwctl overlay import generic /etc/subgid
        - name: Setup ntp on compute
          ansible.builtin.command:
            cmd: bash -c 'echo "server ${sms_ip} iburst" | wwctl overlay import generic <(cat) /etc/chrony.conf'
        - name: Create sysconfig folder
          ansible.builtin.command:
            cmd: wwctl overlay mkdir generic /etc/sysconfig/
        - name: Import slurm sysconfig
          ansible.builtin.command:
            cmd: bash -c 'wwctl overlay import generic <(echo SLURMD_OPTIONS="--conf-server {{ master_ip }}") /etc/sysconfig/slurmd'
        - name: Configure Munge
          block:
            - name: Create munge folder
              ansible.builtin.command:
                cmd: bash -c 'wwctl overlay mkdir generic --mode 0700 /etc/munge'
            - name: Import munge key
              ansible.builtin.command:
                cmd: wwctl overlay import generic /etc/munge/munge.key
            - name: Set munge key permissions
              ansible.builtin.command:
                cmd: bash -c 'wwctl overlay chown generic /etc/munge/munge.key $(id -u munge) $(id -g munge)'
            - name: Set folder permissions
              ansible.builtin.command:
                cmd: bash -c 'wwctl overlay chown generic /etc/munge $(id -u munge) $(id -g munge)'
      ignore_errors: true
    - name: Build container and overlay
      block:
        - name: Build container
          ansible.builtin.command:
            cmd: wwctl container build {{ local_image_name }}
        - name: Build overlay
          ansible.builtin.command:
            cmd: wwctl overlay build
    - name: Register nodes for provisioning
      ansible.builtin.command:
        cmd: bash -c 'wwctl node add --container={{ local_image_name }} --ipaddr={{ item.ip }} --hwaddr={{ item.mac }} {{ item.cname }}'
      with_items: "{{ compute_nodes }}"
    - name: Rebuild overlay
      ansible.builtin.command:
        cmd: wwctl overlay build
    - name: Configure all
      ansible.builtin.command:
        cmd: wwctl configure --all
    - name: Enable and start munge
      ansible.builtin.systemd_service:
        name: munge
        state: started
        enabled: true
    - name: Enable and start slurmctld
      ansible.builtin.systemd_service:
        name: slurmctld
        state: started
        enabled: true
    - name: Confirm compute nodes booted
      ansible.builtin.pause:
        prompt: "Did compute nodes boot successfully? (yes/no)"
      register: user_confirmation

    - name: Proceed if nodes booted
      ansible.builtin.debug:
        msg: "Continuing with the playbook as compute nodes have booted."
      when: user_confirmation.user_input | lower == 'yes'

    - name: Abort if nodes did not boot
      ansible.builtin.debug:
        msg: "Aborting playbook as compute nodes did not boot."
      when: user_confirmation.user_input | lower != 'yes'
      failed_when: user_confirmation.user_input | lower != 'yes'
    
    - name: Install OpenHPC Development Components
      block:
        - name: Install dev-tools
          ansible.builtin.dnf:
            name: ['ohpc-autotools', 'EasyBuild-ohpc', 'spack-ohpc', 'hwloc-ohpc', 'valgrind-ohpc']
            state: present
        - name: Install Compilers
          ansible.builtin.dnf:
            name: ['gnu14-compilers-ohpc']
            state: present
        - name: Install MPI stack
          ansible.builtin.dnf:
            name: ['openmpi5-pmix-gnu14-ohpc', 'mpich-ofi-gnu14-ohpc']
            state: present  
        - name: Install Perf tools
          ansible.builtin.dnf:
            name: ['ohpc-gnu14-perf-tools']
            state: present
        - name: Setup default dev-environment
          ansible.builtin.dnf:
            name: ['lmod-defaults-gnu14-openmpi5-ohpc']
            state: present
        - name: Install 3-rd party tools
          ansible.builtin.dnf:
            name: ['nano', 'ohpc-gnu14-serial-libs', 'ohpc-gnu14-io-libs', 'ohpc-gnu14-python-libs', 'ohpc-gnu14-runtimes', 'ohpc-gnu14-mpich-parallel-libs', 'ohpc-gnu14-openmpi5-parallel-libs']
            state: present
    - name: Resource manager startup
      block:
        - name: Start munge
          ansible.builtin.systemd_service:
            name: munge
            state: started
            enabled: true
        - name: Start slurmctld
          ansible.builtin.systemd_service:
            name: slurmctld
            state: started
            enabled: true
        - name: Enable munge on compute
          ansible.builtin.command:
            cmd: pdsh -w {{ compute_prefix }}[1-{{ compute_number }}] systemctl enable munge
        - name: Enable slurmd on compute
          ansible.builtin.command:
            cmd: pdsh -w {{ compute_prefix }}[1-{{ compute_number }}] systemctl enable slurmd
        - name: Start munge on compute
          ansible.builtin.command:
            cmd: pdsh -w {{ compute_prefix }}[1-{{ compute_number }}] systemctl start munge
        - name: Start slurmd on compute
          ansible.builtin.command:
            cmd: pdsh -w {{ compute_prefix }}[1-{{ compute_number }}] systemctl start slurmd
    - name: Add test user
      ansible.builtin.user:
        name: test
        state: present
    - name: Finish the playbook
      ansible.builtin.debug:
        msg: "Finished playbook. Validate the setup now. Rebooting system now!"
    - name: Reboot now
      ansible.builtin.reboot:
        pre_reboot_delay: 15
        reboot_timeout: 600
